random_numbers4 <- readRDS("~/Desktop/Emory/DATA550/Data-550-Module-8/output/random_numbers4.rds")
random_numbers4
library(readr)
crime_data <- read_csv("Downloads/Crime_Data_from_2020_to_Present_filtered.csv")
library(ggplot2)
ggplot(crime_data, aes(x = Status.Desc)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribution of Status.Desc",
x = "Status.Desc",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(stringr)
crime_data %>%
summarise(
total_count  = n(),
arrest_count = sum(str_detect(Status.Desc, "Arrest")),
proportion   = arrest_count / total_count
)
library(dplyr)
library(stringr)
arrest_table <- crime_data %>%
mutate(Arrest_Flag = if_else(str_detect(Status.Desc, "Arrest"), "Arrest", "No Arrest")) %>%
group_by(Arrest_Flag) %>%
summarise(n = n()) %>%
mutate(prop = n / sum(n))
arrest_table
library(dplyr)
library(stringr)
library(ggplot2)
crime_data %>%
mutate(Arrest_Flag = if_else(str_detect(Status.Desc, "Arrest"), "Arrest", "No Arrest")) %>%
ggplot(aes(x = Arrest_Flag)) +
geom_bar(fill = "steelblue") +
labs(title = "Arrest vs. No Arrest in Status.Desc",
x = "Status Category",
y = "Count") +
theme_minimal()
library(dplyr)
library(stringr)
arrest_table <- crime_data %>%
mutate(Arrest_Flag = if_else(str_detect(Status.Desc, "Arrest"), "Arrest", "No Arrest")) %>%
group_by(Arrest_Flag) %>%
summarise(n = n()) %>%
mutate(prop = n / sum(n))
arrest_table
library(dplyr)
library(stringr)
library(ggplot2)
crime_data %>%
mutate(Arrest_Flag = if_else(str_detect(Status.Desc, "Arrest"), "Arrest", "No Arrest")) %>%
ggplot(aes(x = Arrest_Flag)) +
geom_bar(fill = "steelblue") +
labs(title = "Arrest vs. No Arrest in Status.Desc",
x = "Status Category",
y = "Count") +
theme_minimal()
# Load required packages
library(dplyr)
library(stringr)
library(caret)
install.packages("caret")
# Load required packages
library(dplyr)
library(stringr)
library(caret)
# 1. Create a binary outcome variable "isArrest" based on whether "Arrest" appears in Status.Desc
crime_data <- crime_data %>%
mutate(isArrest = if_else(str_detect(Status.Desc, "Arrest"), "Yes", "No"),
isArrest = as.factor(isArrest))
# Check the distribution of the new variable
table(crime_data$isArrest)
# 2. Split the data into training (70%) and testing (30%) sets
set.seed(123)  # for reproducibility
train_index <- createDataPartition(crime_data$isArrest, p = 0.7, list = FALSE)
train_data <- crime_data[train_index, ]
test_data  <- crime_data[-train_index, ]
# 3. Build a logistic regression model using "Area Name" as the predictor
# Note: if "Area Name" contains spaces, enclose it in backticks.
model <- glm(isArrest ~ `Area Name`,
data = train_data,
family = binomial)
# Load required packages
library(dplyr)
library(stringr)
library(caret)
# 1. Create a binary outcome variable "isArrest" based on whether "Arrest" appears in Status.Desc
crime_data <- crime_data %>%
mutate(isArrest = if_else(str_detect(Status.Desc, "Arrest"), "Yes", "No"),
isArrest = as.factor(isArrest))
# Check the distribution of the new variable
table(crime_data$isArrest)
# 2. Split the data into training (70%) and testing (30%) sets
set.seed(123)  # for reproducibility
train_index <- createDataPartition(crime_data$isArrest, p = 0.7, list = FALSE)
train_data <- crime_data[train_index, ]
test_data  <- crime_data[-train_index, ]
# 3. Build a logistic regression model using "Area Name" as the predictor
# Note: if "Area Name" contains spaces, enclose it in backticks.
model <- glm(isArrest ~ Area.Name,
data = train_data,
family = binomial)
name(crime_data)
names(crime_data)
# Load required packages
library(dplyr)
library(stringr)
library(caret)
# 1. Create a binary outcome variable "isArrest" based on whether "Arrest" appears in Status.Desc
crime_data <- crime_data %>%
mutate(isArrest = if_else(str_detect(Status.Desc, "Arrest"), "Yes", "No"),
isArrest = as.factor(isArrest))
# Check the distribution of the new variable
table(crime_data$isArrest)
# 2. Split the data into training (70%) and testing (30%) sets
set.seed(123)  # for reproducibility
train_index <- createDataPartition(crime_data$isArrest, p = 0.7, list = FALSE)
train_data <- crime_data[train_index, ]
test_data  <- crime_data[-train_index, ]
# 3. Build a logistic regression model using "Area Name" as the predictor
# Note: if "Area Name" contains spaces, enclose it in backticks.
model <- glm(isArrest ~ AREA.NAME,
data = train_data,
family = binomial)
# View the model summary
summary(model)
# 4. Make predictions on the test set
test_data$pred_prob <- predict(model, newdata = test_data, type = "response")
test_data$pred_class <- if_else(test_data$pred_prob > 0.5, "Yes", "No")
test_data$pred_class <- as.factor(test_data$pred_class)
# 5. Evaluate the model using a confusion matrix
conf_matrix <- confusionMatrix(test_data$pred_class, test_data$isArrest)
print(conf_matrix)
# read in data
library(readr)
cdc_data <- read_csv("Desktop/Emory/DATA550/DATA-550-Midterm-Project/data/cdc_data.csv")
getpwd()
getwd()
setwd("Desktop/Emory/DATA550/DATA-550-Midterm-Project/")
getwd()
